apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion // 设置编译时用的的Andr​​oid版本
    buildToolsVersion rootProject.ext.android.buildToolsVersion // 设置编译时使用的构建工具的版本

    defaultConfig {// 设置一些默认属性
        applicationId "com.skx.tomike"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 140
        versionName "1.40.00"
        vectorDrawables.useSupportLibrary = true

        ndk {
            //设置支持的so库架构，每一种 CPU 构架，都定义了一种 ABI（Application Binary Interface），ABI 决定了二进制文件如何与系统进行交互
            abiFilters 'armeabi', 'x86'//, 'x86','armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    buildTypes {
        release {
            minifyEnabled true // 设置是否执行代码缩减（混淆）
            zipAlignEnabled true //设置是否对APK包执行ZIP对齐优化
            shrinkResources true //资源缩减器可以识别应用程序仍在使用哪些资源，未被使用的资源，将会被资源缩减器移除
            debuggable false //设置生成的APK是否支持调试本地代码
            /* 混淆规则配置文件 */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            debuggable true
            /* 混淆规则配置文件 */
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    android {
        sourceSets {
            main {
                jniLibs.srcDirs = ['libs']
            }
        }
    }

    // 使用packagingOptions排除不想添加到apk中的文件
    packagingOptions {
        // eg:要不然在华为的机器上运行不了
//        exclude 'lib/arm64-v8a/libcardioDecider.so'
//        exclude 'lib/arm64-v8a/libcardioRecognizer.so'
//        exclude 'lib/arm64-v8a/libcardioRecognizer_tegra2.so'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation project(path: ':common')
    implementation project(path: ':tacticallaboratory')
    implementation project(path: ':tanklaboratory')
    implementation project(path: ':cannonlaboratory')
    implementation project(path: ':bomberlaboratory')
    // 支持库
    implementation rootProject.ext.dependencies.design
    implementation rootProject.ext.dependencies.supportV4
    implementation rootProject.ext.dependencies.appcompatV7
    implementation rootProject.ext.dependencies.supportMultidex
    implementation rootProject.ext.dependencies.lifecycle
    implementation rootProject.ext.dependencies.constraint_layout
    implementation rootProject.ext.dependencies.cardview
    // 功能库
    implementation rootProject.ext.dependencies.gson
    implementation rootProject.ext.dependencies.rxjava
    implementation rootProject.ext.dependencies.rxandroid
    implementation rootProject.ext.dependencies.retrofit
    implementation rootProject.ext.dependencies.aspectjrt
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation project(":apt-annotation")
    annotationProcessor project(":apt-processor")

    implementation rootProject.ext.room.roomRuntime
    // For Kotlin use kapt instead of annotationProcessor
    annotationProcessor rootProject.ext.room.roomCompiler
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation rootProject.ext.room.roomKtx
    // optional - RxJava support for Room
    implementation rootProject.ext.room.roomRxjava
}


final def log = project.logger

project.android.applicationVariants.all { variant ->

    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    log.error "========================";
    log.error "Aspectj切片开始编织Class!";
    log.error "========================";

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
repositories {
    mavenCentral()
}
